generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @default(now()) @db.DateTime(0)
  username          String              @unique(map: "username_UNIQUE") @db.VarChar(125)
  email             String              @unique(map: "email_UNIQUE") @db.VarChar(125)
  firstName         String?             @db.VarChar(125)
  lastName          String?             @db.VarChar(125)
  birthdate         DateTime?           @db.DateTime(0)
  bio               String?             @db.VarChar(300)
  image             String?             @db.VarChar(125)
  password          String              @db.VarChar(255)
  isAdmin           Boolean?            @default(false)
  comments          comments[]
  communities       communities[]
  community_admins  community_admins[]
  community_invites community_invites[]
  community_members community_members[]
  event_users       event_users[]
  poll_option_votes poll_option_votes[]
  post_likes        post_likes[]
  posts             posts[]
}

model communities {
  id                Int                 @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @default(now()) @db.DateTime(0)
  title             String              @db.VarChar(125)
  description       String?             @db.VarChar(255)
  image             String?             @db.VarChar(125)
  createdBy         Int                 @db.UnsignedInt
  users             users               @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "community_created_by_user")
  community_admins  community_admins[]
  community_invites community_invites[]
  community_members community_members[]
  posts             posts[]

  @@index([createdBy], map: "communityCreatedBy_idx")
}

model posts {
  id                Int                 @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @default(now()) @db.DateTime(0)
  createdBy         Int                 @db.UnsignedInt
  community         Int                 @db.UnsignedInt
  title             String?             @db.VarChar(125)
  body              String?             @db.VarChar(255)
  image             String?             @db.VarChar(125)
  type              String              @db.VarChar(10)
  date              DateTime?           @db.DateTime(0)
  communities       communities         @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "postCommunity")
  users             users               @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "postCreatedBy")
  comments          comments[]
  event_users       event_users[]
  poll_option_votes poll_option_votes[]
  poll_options      poll_options[]
  post_likes        post_likes[]

  @@index([community], map: "postCommunity_idx")
  @@index([createdBy], map: "postCreatedBy_idx")
}

model comments {
  id        Int       @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt DateTime? @default(now()) @db.DateTime(0)
  updatedAt DateTime? @default(now()) @db.DateTime(0)
  createdBy Int       @db.UnsignedInt
  post      Int       @db.UnsignedInt
  text      String    @db.VarChar(255)
  users     users     @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_created_by")
  posts     posts     @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "comment_from_post")

  @@index([createdBy], map: "commentCreatedBy_idx")
  @@index([post], map: "commentPost_idx")
}

model community_members {
  id          Int         @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  community   Int         @db.UnsignedInt
  user        Int         @db.UnsignedInt
  communities communities @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communityMembersCommunity")
  users       users       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "communityUser")

  @@index([community], map: "communityMembersCommunity_idx")
  @@index([user], map: "communityUser_idx")
}

model event_users {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  event     Int      @db.UnsignedInt
  user      Int      @db.UnsignedInt
  createdAt DateTime @default(now()) @db.DateTime(0)
  posts     posts    @relation(fields: [event], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_post")
  users     users    @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "event_user")

  @@index([user], map: "event_user_idx")
  @@index([event], map: "event_post_idx")
}

model poll_option_votes {
  id           Int          @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  poll         Int          @db.UnsignedInt
  option       Int          @db.UnsignedInt
  user         Int          @db.UnsignedInt
  createdAt    DateTime     @default(now()) @db.DateTime(0)
  poll_options poll_options @relation(fields: [option], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "poll_option_vote_option")
  posts        posts        @relation(fields: [poll], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "poll_option_vote_poll")
  users        users        @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "poll_option_vote_user")

  @@index([option], map: "poll_option_vote_option_idx")
  @@index([poll], map: "poll_option_vote_poll_idx")
  @@index([user], map: "poll_option_vote_user_idx")
}

model poll_options {
  id                Int                 @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  poll              Int                 @db.UnsignedInt
  option            String              @db.VarChar(125)
  createdAt         DateTime            @default(now()) @db.DateTime(0)
  posts             posts               @relation(fields: [poll], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "poll_option")
  poll_option_votes poll_option_votes[]

  @@index([poll], map: "poll_option_idx")
}

model community_admins {
  id          Int         @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  community   Int         @db.UnsignedInt
  user        Int         @db.UnsignedInt
  createdAt   DateTime    @default(now()) @db.DateTime(0)
  communities communities @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "administrated_community")
  users       users       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "community_user_admin")

  @@index([community], map: "administrated_community_idx")
  @@index([user], map: "community_admin_admin_idx")
}

model community_invites {
  id          Int         @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  community   Int         @db.UnsignedInt
  user        Int         @db.UnsignedInt
  accepted    Boolean     @default(false)
  createdAt   DateTime    @default(now()) @db.DateTime(0)
  communities communities @relation(fields: [community], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "community_invite_community")
  users       users       @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "community_invite_user")

  @@index([community], map: "community_invite_community_idx")
  @@index([user], map: "community_invite_user_idx")
}

model post_likes {
  id        Int      @id @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  post      Int      @db.UnsignedInt
  user      Int      @db.UnsignedInt
  createdAt DateTime @default(now()) @db.DateTime(0)
  posts     posts    @relation(fields: [post], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_like_post")
  users     users    @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "post_like_user")

  @@index([post], map: "post_like_post_idx")
  @@index([user], map: "post_like_user_idx")
}
